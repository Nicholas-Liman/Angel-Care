def reg_cpf(dados_usuario): #Recebe e verifica cpf
    limpar_tela()
    
    blocklist = [
    '00000000000',
    '11111111111',
    '22222222222',
    '33333333333',
    '44444444444',
    '55555555555',
    '66666666666',
    '77777777777',
    '88888888888',
    '99999999999'
    ]

    while True:

        print('')
        cpf = input(' Por favor nos informe seu cpf: ')
        cpf_sem_ponto = cpf.replace('.', '')
        cpf = cpf_sem_ponto.replace('-', '')
        
        if cpf.isnumeric():
        
            if len(cpf) == 11:
                
                if cpf in blocklist:
                    limpar_tela()

                    print('')
                    print('O CPF não pode ter todos os números iguais!\n')
                    reg_cpf()
                
                else:
                    
                    if validar_cpf(cpf):
                        limpar_tela()

                        print('')
                        print('CPF cadastrado com sucesso\n')
                        guardar_dados('CPF', cpf, dados_usuario)
                        reg_sus(dados_usuario)
                        return cpf

                    else:
                        limpar_tela()

                        print('')
                        print(' CPF Inválido!\n')
                        reg_cpf()
                        
            else:
                limpar_tela()

                print('')
                print('> O número de CPF deve ter 11 dígitos!\n')
                reg_cpf()     
        
        else:
            limpar_tela()

            print('')
            print('Digite apenas números e digitos especiais do cpf como (. e -).\n')
            reg_cpf()

def validar_cpf(cpf): #valida cpf recebido
        corpo_cpf = cpf[:9]
        digito_cpf = cpf[-2:]

        calculo_1 = 0
        calculo_2 = 0
        
        multiplicacao = [10, 9, 8, 7, 6, 5, 4, 3, 2]
        
        for i, j in zip(multiplicacao, corpo_cpf):
            calculo_1 += i * int(j)
        #print(f'Cálculo 1: {calculo_1}')
        
        resto_1 = calculo_1 % 11
        #print(f'Resto 1: {resto_1}')
        
        digito_1 = 0 if resto_1 < 2 else 11 - resto_1
        #print(f'Dígito 1: {digito_1}\n')
        
        corpo_cpf += str(digito_1)
        
        for i, j in zip(multiplicacao, corpo_cpf[1:]):
            calculo_2 += i * int(j)
        
        #print(f'Cálculo 2: {calculo_2}')
        
        resto_2 = calculo_2 % 11
        #print(f'Resto 2: {resto_2}')
        
        digito_2 = 0 if resto_2 < 2 else 11 - resto_2
        #print(f'Dígito 2: {digito_2}')
        
        return digito_cpf == f'{digito_1}{digito_2}'

def reg_sus(dados_usuario): #recebe e salva o cartão do sus
    print('')
    sus = validar_numero('Digite apenas os números do seu cartão SUS, caso não tenha, digite 0: ')
    sus = int(sus)

    if sus == 0:
        limpar_tela()

        print('')
        print('Sem problemas, seguiremos para o próximo passo! ')
        reg_endereco(dados_usuario)

    else:
        limpar_tela()

        print('')
        print('Número SUS cadastrado com sucesso')
        guardar_dados('Numero Carteira SUS', sus, dados_usuario)
        reg_endereco(dados_usuario)
        return sus
   